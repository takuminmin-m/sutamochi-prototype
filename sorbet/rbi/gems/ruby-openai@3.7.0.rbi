# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-openai` gem.
# Please instead update this file by running `bin/tapioca gem ruby-openai`.

# source://ruby-openai//lib/openai/client.rb#1
module OpenAI
  class << self
    # source://ruby-openai//lib/openai.rb#42
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://ruby-openai//lib/openai.rb#39
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://ruby-openai//lib/openai.rb#46
    def configure; end
  end
end

# source://ruby-openai//lib/openai/client.rb#2
class OpenAI::Client
  # @return [Client] a new instance of Client
  #
  # source://ruby-openai//lib/openai/client.rb#3
  def initialize(access_token: T.unsafe(nil), organization_id: T.unsafe(nil), uri_base: T.unsafe(nil), request_timeout: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#10
  def chat(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#14
  def completions(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#18
  def edits(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#22
  def embeddings(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#26
  def files; end

  # source://ruby-openai//lib/openai/client.rb#30
  def finetunes; end

  # source://ruby-openai//lib/openai/client.rb#34
  def images; end

  # source://ruby-openai//lib/openai/client.rb#38
  def models; end

  # source://ruby-openai//lib/openai/client.rb#42
  def moderations(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#46
  def transcribe(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#50
  def translate(parameters: T.unsafe(nil)); end

  class << self
    # source://ruby-openai//lib/openai/client.rb#80
    def delete(path:); end

    # source://ruby-openai//lib/openai/client.rb#54
    def get(path:); end

    # source://ruby-openai//lib/openai/client.rb#62
    def json_post(path:, parameters:); end

    # source://ruby-openai//lib/openai/client.rb#71
    def multipart_post(path:, parameters: T.unsafe(nil)); end

    private

    # source://ruby-openai//lib/openai/client.rb#92
    def headers; end

    # source://ruby-openai//lib/openai/client.rb#100
    def request_timeout; end

    # source://ruby-openai//lib/openai/client.rb#88
    def uri(path:); end
  end
end

# source://ruby-openai//lib/openai.rb#14
class OpenAI::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://ruby-openai//lib/openai.rb#22
  def initialize; end

  # @raise [ConfigurationError]
  #
  # source://ruby-openai//lib/openai.rb#30
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  #
  # source://ruby-openai//lib/openai.rb#15
  def access_token=(_arg0); end

  # Returns the value of attribute api_version.
  #
  # source://ruby-openai//lib/openai.rb#16
  def api_version; end

  # Sets the attribute api_version
  #
  # @param value the value to set the attribute api_version to.
  #
  # source://ruby-openai//lib/openai.rb#16
  def api_version=(_arg0); end

  # Returns the value of attribute organization_id.
  #
  # source://ruby-openai//lib/openai.rb#16
  def organization_id; end

  # Sets the attribute organization_id
  #
  # @param value the value to set the attribute organization_id to.
  #
  # source://ruby-openai//lib/openai.rb#16
  def organization_id=(_arg0); end

  # Returns the value of attribute request_timeout.
  #
  # source://ruby-openai//lib/openai.rb#16
  def request_timeout; end

  # Sets the attribute request_timeout
  #
  # @param value the value to set the attribute request_timeout to.
  #
  # source://ruby-openai//lib/openai.rb#16
  def request_timeout=(_arg0); end

  # Returns the value of attribute uri_base.
  #
  # source://ruby-openai//lib/openai.rb#16
  def uri_base; end

  # Sets the attribute uri_base
  #
  # @param value the value to set the attribute uri_base to.
  #
  # source://ruby-openai//lib/openai.rb#16
  def uri_base=(_arg0); end
end

# source://ruby-openai//lib/openai.rb#18
OpenAI::Configuration::DEFAULT_API_VERSION = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai.rb#20
OpenAI::Configuration::DEFAULT_REQUEST_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ruby-openai//lib/openai.rb#19
OpenAI::Configuration::DEFAULT_URI_BASE = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai.rb#12
class OpenAI::ConfigurationError < ::OpenAI::Error; end

# source://ruby-openai//lib/openai.rb#11
class OpenAI::Error < ::StandardError; end

# source://ruby-openai//lib/openai/files.rb#2
class OpenAI::Files
  # @return [Files] a new instance of Files
  #
  # source://ruby-openai//lib/openai/files.rb#3
  def initialize(access_token: T.unsafe(nil), organization_id: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/files.rb#25
  def content(id:); end

  # source://ruby-openai//lib/openai/files.rb#29
  def delete(id:); end

  # source://ruby-openai//lib/openai/files.rb#8
  def list; end

  # source://ruby-openai//lib/openai/files.rb#21
  def retrieve(id:); end

  # source://ruby-openai//lib/openai/files.rb#12
  def upload(parameters: T.unsafe(nil)); end

  private

  # source://ruby-openai//lib/openai/files.rb#35
  def validate(file:); end
end

# source://ruby-openai//lib/openai/finetunes.rb#2
class OpenAI::Finetunes
  # @return [Finetunes] a new instance of Finetunes
  #
  # source://ruby-openai//lib/openai/finetunes.rb#3
  def initialize(access_token: T.unsafe(nil), organization_id: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/finetunes.rb#20
  def cancel(id:); end

  # source://ruby-openai//lib/openai/finetunes.rb#12
  def create(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/finetunes.rb#28
  def delete(fine_tuned_model:); end

  # source://ruby-openai//lib/openai/finetunes.rb#24
  def events(id:); end

  # source://ruby-openai//lib/openai/finetunes.rb#8
  def list; end

  # source://ruby-openai//lib/openai/finetunes.rb#16
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/images.rb#2
class OpenAI::Images
  # @return [Images] a new instance of Images
  #
  # source://ruby-openai//lib/openai/images.rb#3
  def initialize(access_token: T.unsafe(nil), organization_id: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/images.rb#12
  def edit(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/images.rb#8
  def generate(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/images.rb#16
  def variations(parameters: T.unsafe(nil)); end

  private

  # source://ruby-openai//lib/openai/images.rb#22
  def open_files(parameters); end
end

# source://ruby-openai//lib/openai/models.rb#2
class OpenAI::Models
  # @return [Models] a new instance of Models
  #
  # source://ruby-openai//lib/openai/models.rb#3
  def initialize(access_token: T.unsafe(nil), organization_id: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/models.rb#8
  def list; end

  # source://ruby-openai//lib/openai/models.rb#12
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/version.rb#2
OpenAI::VERSION = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai/compatibility.rb#1
module Ruby; end

# source://ruby-openai//lib/openai/compatibility.rb#2
module Ruby::OpenAI; end

# source://ruby-openai//lib/openai/compatibility.rb#7
Ruby::OpenAI::Configuration = OpenAI::Configuration

# source://ruby-openai//lib/openai/compatibility.rb#6
Ruby::OpenAI::ConfigurationError = OpenAI::ConfigurationError

# source://ruby-openai//lib/openai/compatibility.rb#5
Ruby::OpenAI::Error = OpenAI::Error

# source://ruby-openai//lib/openai/compatibility.rb#3
Ruby::OpenAI::VERSION = T.let(T.unsafe(nil), String)
